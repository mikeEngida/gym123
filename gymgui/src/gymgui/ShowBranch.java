/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gymgui;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Niro Computers
 */
public class ShowBranch extends javax.swing.JDialog {

    /**
     * Creates new form ShowBranch
     */
    public ShowBranch(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        id_box = new javax.swing.JCheckBox();
        lcn_box = new javax.swing.JCheckBox();
        strt_box = new javax.swing.JCheckBox();
        ncli_box = new javax.swing.JCheckBox();
        shw_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        branch_tbl = new javax.swing.JTable();
        quit_show_dept_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        filter_branch = new javax.swing.JList<>();
        branch_id = new javax.swing.JTextField();
        mgr_id = new javax.swing.JTextField();
        branch_start = new com.toedter.calendar.JDateChooser();
        slct = new javax.swing.JButton();
        toHome_show_dept_btn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nClient = new javax.swing.JSpinner();
        nEmp = new javax.swing.JSpinner();
        mgr_box = new javax.swing.JCheckBox();
        branch_location = new javax.swing.JTextField();
        nemp_box = new javax.swing.JCheckBox();
        branch_start1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setText("Show By");

        id_box.setSelected(true);
        id_box.setText("Branch ID");
        id_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_boxActionPerformed(evt);
            }
        });

        lcn_box.setSelected(true);
        lcn_box.setText("Location");
        lcn_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lcn_boxActionPerformed(evt);
            }
        });

        strt_box.setText("Start Date");
        strt_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strt_boxActionPerformed(evt);
            }
        });

        ncli_box.setText("Number of Clients");
        ncli_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ncli_boxActionPerformed(evt);
            }
        });

        shw_btn.setText("Show");
        shw_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shw_btnActionPerformed(evt);
            }
        });

        branch_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Location"
            }
        ));
        jScrollPane2.setViewportView(branch_tbl);

        quit_show_dept_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        quit_show_dept_btn.setText("QUIT");
        quit_show_dept_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quit_show_dept_btnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Show a Branch Record");

        filter_branch.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Branch ID", "Branch Location", "Branch Start Date", "Branch Manager ID", "Number of Clients", "Number of Employees" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(filter_branch);

        branch_id.setText("Enter Branch ID");
        branch_id.setEnabled(false);

        mgr_id.setText("Enter Manager ID");
        mgr_id.setEnabled(false);
        mgr_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mgr_idActionPerformed(evt);
            }
        });

        branch_start.setToolTipText("Enter the purchase date here");
        branch_start.setDateFormatString("yyyy/MM/dd");
        branch_start.setEnabled(false);

        slct.setText("Select");
        slct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slctActionPerformed(evt);
            }
        });

        toHome_show_dept_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        toHome_show_dept_btn.setText("GO BACK");
        toHome_show_dept_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toHome_show_dept_btnActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter By:");

        nClient.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        nClient.setToolTipText("Number of clients");
        nClient.setEnabled(false);

        nEmp.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        nEmp.setEnabled(false);

        mgr_box.setText("Manager ID");
        mgr_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mgr_boxActionPerformed(evt);
            }
        });

        branch_location.setText("Enter Location");
        branch_location.setEnabled(false);

        nemp_box.setText("Number of Employees");
        nemp_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nemp_boxActionPerformed(evt);
            }
        });

        branch_start1.setToolTipText("Enter the purchase date here");
        branch_start1.setDateFormatString("yyyy/MM/dd");
        branch_start1.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Number  of  clients   >");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Human  resources   >");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(branch_id, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(branch_location, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mgr_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lcn_box, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(82, 82, 82)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nemp_box)
                                            .addComponent(ncli_box)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(mgr_box)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(shw_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(slct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(branch_start1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                            .addComponent(branch_start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(nClient)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(strt_box)
                                    .addComponent(id_box, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(toHome_show_dept_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(quit_show_dept_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(129, 129, 129))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(slct, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(branch_id, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(branch_location, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mgr_id, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(branch_start, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(nClient))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(branch_start1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id_box)
                            .addComponent(mgr_box, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shw_btn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nemp_box)
                            .addComponent(lcn_box))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strt_box)
                            .addComponent(ncli_box))))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toHome_show_dept_btn)
                    .addComponent(quit_show_dept_btn))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void id_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_boxActionPerformed

    private void lcn_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lcn_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lcn_boxActionPerformed

    private void strt_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strt_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strt_boxActionPerformed

    private void ncli_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ncli_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ncli_boxActionPerformed

    private void quit_show_dept_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quit_show_dept_btnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quit_show_dept_btnActionPerformed

    private void toHome_show_dept_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toHome_show_dept_btnActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Home wind = new Home();
                wind.setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_toHome_show_dept_btnActionPerformed

    private void mgr_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mgr_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mgr_boxActionPerformed

    private void mgr_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mgr_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mgr_idActionPerformed

    private void nemp_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nemp_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nemp_boxActionPerformed

    private void slctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slctActionPerformed
        // TODO add your handling code here:
        List<String> vals = filter_branch.getSelectedValuesList();
        branch_id.setEnabled(vals.contains("Branch ID"));
        branch_location.setEnabled(vals.contains("Branch Location"));
        branch_start.setEnabled(vals.contains("Branch Start Date"));
        branch_start1.setEnabled(vals.contains("Branch Start Date"));
        mgr_id.setEnabled(vals.contains("Branch Manager ID"));
        nClient.setEnabled(vals.contains("Number of Clients"));
        nEmp.setEnabled(vals.contains("Number of Employees"));
        
        
    }//GEN-LAST:event_slctActionPerformed

    private void shw_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shw_btnActionPerformed
        // TODO add your handling code here:
        List<String> vals = filter_branch.getSelectedValuesList();
try{
if(vals.size()>0){
String whereClause = " WHERE " + createWhereClause(vals);
String select = "SELECT DISTINCT " + selectedBoxes() + 
        " FROM branch INNER JOIN (SELECT employee.ebranch, COUNT(*) AS nume FROM employee GROUP BY employee.ebranch) AS emp "
        + "  INNER JOIN (SELECT client.cbid, COUNT(*) AS numc FROM client GROUP BY client.cbid) AS cli ON emp.ebranch = branch.bid AND cli.cbid = branch.bid ";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select+whereClause+";");
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select + whereClause);

selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "bid");
map.put("Location", "blocation");
map.put("Start Date", "bstart_date");
map.put("Manager", "mgr_id");
map.put("Number of Clients", "numc");
map.put("Number of Employees", "nume");

  
        
String[] dataArray = new String[cols.size()];
while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}

   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
branch_tbl.setModel(model);

cols.clear();
data.clear();



}
else{
String select = "SELECT DISTINCT " + selectedBoxes() + 
        " FROM branch INNER JOIN (SELECT employee.ebranch, COUNT(*) AS nume FROM employee GROUP BY employee.ebranch) AS emp "
        + "  INNER JOIN (SELECT client.cbid, COUNT(*) AS numc FROM client GROUP BY client.cbid) AS cli ON emp.ebranch = branch.bid AND cli.cbid = branch.bid; ";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select);
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select);
selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "bid");
map.put("Location", "blocation");
map.put("Start Date", "bstart_date");
map.put("Manager", "mgr_id");
map.put("Number of Clients", "numc");
map.put("Number of Employees", "nume");
  
        
String[] dataArray = new String[cols.size()];
    //System.out.println(rs.getMetaData().getColumnCount());

while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}
   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
branch_tbl.setModel(model);

cols.clear();
data.clear();

}






}
catch(Exception ex){
    ex.printStackTrace();
    javax.swing.JOptionPane.showMessageDialog(rootPane, "Oops! Unknown Error occured with the database.");
    //ex.printStackTrace();

}



        
        
        
        
    }//GEN-LAST:event_shw_btnActionPerformed
    
    private void selectedCols(ArrayList<String> cols){
    if(id_box.isSelected()) cols.add("ID");
    else cols.remove("ID");
    
    if(lcn_box.isSelected()) cols.add("Location");
    else cols.remove("Location");
    
    if(strt_box.isSelected()) cols.add("Start Date");
    else cols.remove("Start Date");
    if(mgr_box.isSelected()) cols.add("Manager");
    else cols.remove("Manager");
    if(ncli_box.isSelected()) cols.add("Number of Clients");
    else cols.remove("Number of Clients");
    if(nemp_box.isSelected()) cols.add("Number of Employees");
    else cols.remove("Number of Employees");
 
    
    
    
    }
    
    private String selectedBoxes(){
    ArrayList<String> fields = new ArrayList<String>();
    if(id_box.isSelected()) fields.add("branch.bid");
    if(lcn_box.isSelected()) fields.add("branch.blocation");
    if(strt_box.isSelected()) fields.add("branch.bstart_date");
    if(mgr_box.isSelected()) fields.add("branch.mgr_id");
    if(ncli_box.isSelected()) fields.add("cli.numc");
    if(nemp_box.isSelected()) fields.add("emp.nume");
    
    return (" " + String.join(", ", (String[])fields.toArray(new String[fields.size()])));
    


    
    
    }
    private String createWhereClause(List<String> vals){
        String param[] =  new String[vals.size()];
        //System.out.println(new SimpleDateFormat("yyyy/MM/dd").format(show_client_dob2.getDate()));
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        //System.out.println(vals.contains("Client Membership Date"));
//        String count;
//        if(vals.contains("Number of Programmes") && Integer.parseInt(no_of_progs.getValue().toString()) > 0)
//               count = " AND NOT ISNULL(pid) GROUP BY client.cid HAVING count(*) = " + no_of_progs.getValue().toString()+ ";";
//        else if (vals.contains("Number of Programmes") && Integer.parseInt(no_of_progs.getValue().toString()) == 0 )
//               count = " AND ISNULL(pid) GROUP BY client.cid;";
//        else
//             count = "GROUP BY client.cid;";
        if(vals.contains("Branch ID")){
        param[vals.indexOf("Branch ID") ] = " branch.bid = " + branch_id.getText();}
        
        if(vals.contains("Branch Location")){
        param[vals.indexOf("Branch Location") ] = " branch.blocation = \"" + branch_location.getText() +  "\"";
        }
        if(vals.contains("Branch Start Date")){
        param[vals.indexOf("Branch Start Date") ] = " branch.bstart_date >= \"" + dateFormat.format(branch_start.getDate()) + "\" AND branch.bstart_date < \"" + dateFormat.format(branch_start1.getDate())+ "\"" ;}

        if(vals.contains("Branch Manager ID")){
        param[vals.indexOf("Branch Manager ID") ] = " branch.mgr_id = \"" + mgr_id.getText() + "\"";}
        if(vals.contains("Number of Clients")){
        param[vals.indexOf("Number of Clients") ] = " cli.numc > " + nClient.getValue() + " ";}
        if(vals.contains("Number of Employees")){
        param[vals.indexOf("Number of Employees") ] = " emp.nume > " + nEmp.getValue() + " ";}
//        if(vals.contains("Number of Programmes")){
//        param[vals.indexOf("Number of Programmes") ] = "GROUP BY client.cid HAVING " + count ;}
//        String [] param2 = {"1", "2", "3"};
 //      System.out.println(String.join(" AND ", param).replace("null", "TRUE") + count);
        return String.join(" AND ", param).replace("null", "TRUE");
        
        
       
        
    
    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowBranch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowBranch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowBranch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowBranch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowBranch dialog = new ShowBranch(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField branch_id;
    private javax.swing.JTextField branch_location;
    private com.toedter.calendar.JDateChooser branch_start;
    private com.toedter.calendar.JDateChooser branch_start1;
    private javax.swing.JTable branch_tbl;
    private javax.swing.JList<String> filter_branch;
    private javax.swing.JCheckBox id_box;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox lcn_box;
    private javax.swing.JCheckBox mgr_box;
    private javax.swing.JTextField mgr_id;
    private javax.swing.JSpinner nClient;
    private javax.swing.JSpinner nEmp;
    private javax.swing.JCheckBox ncli_box;
    private javax.swing.JCheckBox nemp_box;
    private javax.swing.JButton quit_show_dept_btn;
    private javax.swing.JButton shw_btn;
    private javax.swing.JButton slct;
    private javax.swing.JCheckBox strt_box;
    private javax.swing.JButton toHome_show_dept_btn;
    // End of variables declaration//GEN-END:variables
    private DBConnection conn;
    private ArrayList<String> cols = new ArrayList<String>();

}
