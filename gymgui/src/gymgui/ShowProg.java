/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gymgui;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Niro Computers
 */
public class ShowProg extends javax.swing.JDialog {

    /**
     * Creates new form ShowProg
     */
    public ShowProg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            this.instructors = getInst();
            this.branches = getBranches();
            initComponents();
        } catch (SQLException ex) {
            Logger.getLogger(ShowProg.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ShowProg.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        show_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        show_id_prg = new javax.swing.JTextField();
        prog_end = new com.toedter.calendar.JDateChooser();
        show_branch_client = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        filter_prog = new javax.swing.JList<>();
        no_of_parts = new javax.swing.JSpinner();
        show_name_prg = new javax.swing.JTextField();
        prog_inst_list = new javax.swing.JComboBox<>();
        filter_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        pid_box = new javax.swing.JCheckBox();
        pname_box = new javax.swing.JCheckBox();
        pstart_box = new javax.swing.JCheckBox();
        pend_box = new javax.swing.JCheckBox();
        pinst_box = new javax.swing.JCheckBox();
        pbranch_box = new javax.swing.JCheckBox();
        no_part_box = new javax.swing.JCheckBox();
        prog_strt = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        prog_table = new javax.swing.JTable();
        quit_show_client_btn = new javax.swing.JButton();
        toHome_show_client_btn = new javax.swing.JButton();
        prog_strt1 = new com.toedter.calendar.JDateChooser();
        prog_end1 = new com.toedter.calendar.JDateChooser();
        inst_name_box = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Show programmes");

        show_btn.setText("Show Records");
        show_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_btnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Show Programme Data");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Filter by");

        show_id_prg.setText("Enter ID");
        show_id_prg.setDragEnabled(true);
        show_id_prg.setEnabled(false);
        show_id_prg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_id_prgActionPerformed(evt);
            }
        });
        show_id_prg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                show_id_prgPropertyChange(evt);
            }
        });

        prog_end.setToolTipText("Program End Date");
        prog_end.setDateFormatString("yyyy/MM/dd");
        prog_end.setEnabled(false);

        show_branch_client.setModel(new DefaultComboBoxModel(this.branches));
        show_branch_client.setEnabled(false);

        filter_prog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        filter_prog.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Programme ID", "Programme Name", "Programme Start Date", "Programme End Date", "Programme Instructor", "Programme Branch", "Number of Participants" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        filter_prog.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                filter_progFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(filter_prog);

        no_of_parts.setModel(new javax.swing.SpinnerNumberModel(5, null, 20, 1));
        no_of_parts.setEnabled(false);

        show_name_prg.setText("Enter Programme Name");
        show_name_prg.setEnabled(false);
        show_name_prg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_name_prgActionPerformed(evt);
            }
        });

        prog_inst_list.setModel(new DefaultComboBoxModel(this.instructors));
        prog_inst_list.setSelectedItem(new DefaultComboBoxModel(this.instructors));
        prog_inst_list.setEnabled(false);
        prog_inst_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prog_inst_listActionPerformed(evt);
            }
        });

        filter_btn.setText("Select");
        filter_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_btnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Show");

        pid_box.setSelected(true);
        pid_box.setText("Programme ID");
        pid_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pid_boxActionPerformed(evt);
            }
        });

        pname_box.setSelected(true);
        pname_box.setText("Programme Name");
        pname_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pname_boxActionPerformed(evt);
            }
        });

        pstart_box.setText("Start Date");
        pstart_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pstart_boxActionPerformed(evt);
            }
        });

        pend_box.setText("End Date");
        pend_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pend_boxActionPerformed(evt);
            }
        });

        pinst_box.setText("Instructor ID");
        pinst_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinst_boxActionPerformed(evt);
            }
        });

        pbranch_box.setText(" Branch");
        pbranch_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbranch_boxActionPerformed(evt);
            }
        });

        no_part_box.setText("Number of Participants");
        no_part_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                no_part_boxActionPerformed(evt);
            }
        });

        prog_strt.setToolTipText("Programme Start Date");
        prog_strt.setDateFormatString("yyyy/MM/dd");
        prog_strt.setEnabled(false);

        prog_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ));
        jScrollPane2.setViewportView(prog_table);

        quit_show_client_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        quit_show_client_btn.setText("QUIT");

        toHome_show_client_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        toHome_show_client_btn.setText("GO BACK");
        toHome_show_client_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toHome_show_client_btnActionPerformed(evt);
            }
        });

        prog_strt1.setToolTipText("Programme Start Date");
        prog_strt1.setDateFormatString("yyyy/MM/dd");
        prog_strt1.setEnabled(false);

        prog_end1.setToolTipText("Program End Date");
        prog_end1.setDateFormatString("yyyy/MM/dd");
        prog_end1.setEnabled(false);

        inst_name_box.setText("Instructor Name");
        inst_name_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inst_name_boxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(toHome_show_client_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quit_show_client_btn)
                        .addGap(164, 164, 164))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pid_box)
                                    .addComponent(pname_box)
                                    .addComponent(pstart_box))
                                .addGap(157, 157, 157)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 39, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pinst_box)
                                            .addComponent(pend_box)
                                            .addComponent(inst_name_box))
                                        .addGap(138, 138, 138)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(no_part_box)
                                            .addComponent(show_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pbranch_box)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(94, 94, 94)
                                        .addComponent(show_name_prg, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17)
                                        .addComponent(show_branch_client, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                        .addComponent(filter_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(show_id_prg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(prog_end, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                            .addComponent(prog_strt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(prog_end1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(prog_strt1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(prog_inst_list, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(no_of_parts, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(46, 46, 46))))
            .addGroup(layout.createSequentialGroup()
                .addGap(341, 341, 341)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(show_id_prg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(show_name_prg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(show_branch_client, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(prog_inst_list, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(prog_strt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(prog_strt1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prog_end, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(no_of_parts, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(prog_end1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(filter_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pid_box))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pname_box)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pstart_box))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pend_box)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pinst_box))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(no_part_box)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pbranch_box)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(show_btn)
                            .addComponent(inst_name_box))))
                .addGap(48, 48, 48)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toHome_show_client_btn)
                    .addComponent(quit_show_client_btn))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void show_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_btnActionPerformed
        // TODO add your handling code here:
        //        int count = 0;
        //        ArrayList<String> boxes_on;
        //        boxes_on = new ArrayList<String>();
        //        if(cid_box.isSelected()) boxes_on.add("ID");
        //        if(cname_box.isSelected()) boxes_on.add("Name");
        //        if(csex_box.isSelected()) boxes_on.add("Sex");
        //        if(cdob_box.isSelected()) boxes_on.add("Date of Birth");
        //        if(cjoin_box.isSelected()) boxes_on.add("Join Date");
        //        if(ctier_box.isSelected()) boxes_on.add("Membership Tier");
        //        if(cphone_box.isSelected()) boxes_on.add("Phone");
        //        if(caddress_box.isSelected()) boxes_on.add("Address");
        //        System.out.println(client_table.getColumnCount());
        //        HashMap<String, String> map = new HashMap<String,String>();
        ////        for (int i = 0; i < boxes_on.size(); i++) {
            ////             String col = client_table.getColumnName(i);
            ////             String s = boxes_on.get(i);
            ////             map.put(col, s);
            ////
            ////        }
        //ArrayList<String> prev = new ArrayList<>();
        //
        //if (count == 0)
        //{
            //
            //    prev.add("Title 1");
            //    prev.add("Title 2");
            //    prev.add("Title 3");
            //    prev.add("Title 4");
            //}
        //
        //
        //
        //
        //        //System.out.println(map.toString());
        //
        //         if(client_table.getColumnCount() >0)
        //           for (int i = 0; client_table.getColumnCount()!=0; i++) {
            //
            //            String col = client_table.getColumnName(0);
            //             //System.out.println(col + " " + client_table.getColumn(col));
            //
            //             //String s = boxes_on.get(i);
            //
            //            // System.out.println(i);
            //             System.out.println(i);
            //            TableColumn toRemove = client_table.getColumn(col);
            //
            //            client_table.removeColumn(toRemove);
            //        // client_table.validate();}
        //         }
        //
        //
        //         TableColumn[] newCols = new TableColumn[boxes_on.size()];
        //        for (int i = 0; i < boxes_on.size(); i++) {
            //            newCols[i] = new TableColumn();
            //            newCols[i].setIdentifier(i);
            //            newCols[i].setHeaderValue(boxes_on.get(i));
            //            //newCols[i].setIdentifier(boxes_on.get(i));
            //            newCols[i].setPreferredWidth(WIDTH);
            //            client_table.addColumn(newCols[i]);
            //
            //        }
        //                     client_table.validate();
        //
        //
        //        boxes_on.clear();
        //        map.clear();
        //        count++;
        //

        //if(toggle){
            //client_table.removeColumn(client_table.getColumn("Title 1"));
            //client_table.validate();
            //
            //}
        //else{
            //TableColumn newCol = new TableColumn();
            //newCol.setHeaderValue("Title 1");
            //newCol.setIdentifier("Title 1");
            //newCol.setPreferredWidth(WIDTH);
            //client_table.addColumn(newCol);
            //client_table.validate();
            //}
        //
        //
        //      toggle = !toggle;
        
        List<String> vals = filter_prog.getSelectedValuesList();
try{
if(vals.size()>0){
String whereClause = " WHERE " + " client_programme.pid = programme.pid AND " + createWhereClause(vals);
String select = "SELECT DISTINCT " + selectedBoxes() + " FROM client_programme, programme LEFT JOIN employee ON programme.prg_inst = employee.eid ";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select+whereClause);
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select + whereClause);

selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "pid");
map.put("Name", "prg_name");
map.put("Start Date", "pstart_date");
map.put("End Date", "prg_end_date");
map.put("Instructor ID", "prg_inst");
map.put("Instructor's First Name", "efname");
map.put("Instructor's Last Name", "elname");
map.put("Branch", "ebranch");
map.put("Number of participants", "COUNT(*)");
  
        
String[] dataArray = new String[cols.size()];
while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}

   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
prog_table.setModel(model);

cols.clear();
data.clear();



}
else{
String select = "SELECT DISTINCT " + selectedBoxes() + " FROM client_programme, programme LEFT JOIN employee ON programme.prg_inst = employee.eid WHERE client_programme.pid = programme.pid " + " GROUP BY programme.pid ;";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select);
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select);
selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "pid");
map.put("Name", "prg_name");
map.put("Start Date", "pstart_date");
map.put("End Date", "prg_end_date");
map.put("Instructor ID", "prg_inst");
map.put("Instructor's First Name", "efname");
map.put("Instructor's Last Name", "elname");
map.put("Branch", "ebranch");
map.put("Number of participants", "COUNT(*)");
  
        
String[] dataArray = new String[cols.size()];
    //System.out.println(rs.getMetaData().getColumnCount());

while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}
   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
prog_table.setModel(model);

cols.clear();
data.clear();

}






}
catch(Exception ex){
    String msg = ex.toString();
    if (msg.contains("NullPointer"))javax.swing.JOptionPane.showMessageDialog(rootPane, "A required field is not filled.");
    else if (msg.contains("syntax")) javax.swing.JOptionPane.showMessageDialog(rootPane, "An invalid input is entered.");
    else     javax.swing.JOptionPane.showMessageDialog(rootPane, "Oops! Unknown Error occured with the database.");




}


        
        
        
        
        
        
        
        
    }//GEN-LAST:event_show_btnActionPerformed

    
     private void selectedCols(ArrayList<String> cols){
    if(pid_box.isSelected()) cols.add("ID");
    else cols.remove("ID");
    if(pname_box.isSelected()) {cols.add("Name"); }
    else {cols.remove("Name");}
    if(pstart_box.isSelected()) cols.add("Start Date");
    else cols.remove("Start Date");
    if(pend_box.isSelected()) cols.add("End Date");
    else cols.remove("End Date");
    if(pinst_box.isSelected()) cols.add("Instructor ID");
    else cols.remove("Instructor ID");
        if(inst_name_box.isSelected()) {cols.add("Instructor's First Name"); cols.add("Instructor's Last Name");}
    else  {cols.remove("Instructor's First Name"); cols.remove("Instructor's Last Name");}
        
    if(pbranch_box.isSelected()) cols.add("Branch");
    else cols.remove("Branch");
    if(no_part_box.isSelected()) cols.add("Number of participants");
    else cols.remove("Number of participants");
    
    
    
    
    }

    
  
    
    
    private String selectedBoxes(){
    ArrayList<String> fields = new ArrayList<String>();
    if(pid_box.isSelected()) fields.add("programme.pid");
    if(pname_box.isSelected()) fields.add("programme.prg_name");
    if(pstart_box.isSelected()) fields.add("programme.pstart_date");
    if(pend_box.isSelected()) fields.add("programme.prg_end_date");
    if(pinst_box.isSelected()) fields.add("programme.prg_inst");
    if(inst_name_box.isSelected()) fields.add("employee.efname, employee.elname");
    if(pbranch_box.isSelected()) fields.add("employee.ebranch");
    if(no_part_box.isSelected()) fields.add("count(*)");
    
    return (" " + String.join(", ", (String[])fields.toArray(new String[fields.size()])));
    


    
    
    }
    
    
    private String createWhereClause(List<String> vals){
        String param[] =  new String[vals.size()];
        //System.out.println(new SimpleDateFormat("yyyy/MM/dd").format(show_client_dob2.getDate()));
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        //System.out.println(vals.contains("Client Membership Date"));
        String count;
        if(vals.contains("Number of Participants") && Integer.parseInt(no_of_parts.getValue().toString()) > 0)
               count = " GROUP BY programme.pid HAVING count(*) = " + no_of_parts.getValue().toString()+ ";";
       
        else
             count = "GROUP BY programme.pid;";
        if(vals.contains("Programme ID")){
        param[vals.indexOf("Programme ID") ] = " programme.pid = " + show_id_prg.getText();}
        
        if(vals.contains("Programme Name")){
        param[vals.indexOf("Programme Name") ] = " programme.prg_name = \"" + show_name_prg +  "\" ";
        }
//        if(vals.contains("Client Membership Date")){
//        param[vals.indexOf("Client Membership Date") ] = " client.cstart_date >= \"" + dateFormat.format(date_f.getDate()) + "\"  AND client.cstart_date < \"" + dateFormat.format(date_f2.getDate())+ "\"" ;}
        if(vals.contains("Prpgramme Start Date")){
        param[vals.indexOf("Programme Start Date")] = " programme.pstart_date >= \"" + dateFormat.format(prog_strt.getDate()) + "\" AND programme.pstart_date < \"" + dateFormat.format(prog_strt1.getDate())+ "\"" ;}
        if(vals.contains("Programme End Date")){
            if(prog_end.getCalendar() != null && prog_end1.getCalendar() != null ) 
                param[vals.indexOf("Programme End Date") ] = "NOT ISNULL(programme.prg_end_date) AND programme.prg_end_date >= \"" + dateFormat.format(prog_end.getDate()) + "\" AND programme.prg_end_date < \"" + dateFormat.format(prog_end1.getDate())+ "\"" ;
        else   param[vals.indexOf("Programme End Date") ] = " ISNULL(programme.prg_end_date) ";}

            
        if(vals.contains("Programme Instructor")){
        param[vals.indexOf("Programme Instructor") ] = " programme.prg_inst = \"" + prog_inst_list.getSelectedItem().toString()+ "\"";}
        if(vals.contains("Programme Branch")){
        param[vals.indexOf("Programme Branch") ] = " employee.ebranch = " + show_branch_client.getSelectedItem().toString() + " ";}
//        if(vals.contains("Number of Programmes")){
//        param[vals.indexOf("Number of Programmes") ] = "GROUP BY client.cid HAVING " + count ;}
//        String [] param2 = {"1", "2", "3"};
 //      System.out.println(String.join(" AND ", param).replace("null", "TRUE") + count);
        return String.join(" AND ", param).replace("null", " TRUE ") + count;
        
        
       
        
    
    
    }
    
    
    
    
    
    
    private void show_id_prgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_id_prgActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_show_id_prgActionPerformed

    private void show_id_prgPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_show_id_prgPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_show_id_prgPropertyChange

    private void filter_progFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filter_progFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_filter_progFocusLost

    private void show_name_prgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_name_prgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_show_name_prgActionPerformed

    private void prog_inst_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prog_inst_listActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prog_inst_listActionPerformed

    private void filter_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_btnActionPerformed
        List<String> vals = filter_prog.getSelectedValuesList();

        //System.out.println(date_f.isEnabled());
        ;

        show_id_prg.setEnabled(vals.contains("Programme ID"));

        show_name_prg.setEnabled(vals.contains("Programme Name"));
        

        prog_end.setEnabled(vals.contains("Programme End Date"));
        prog_end1.setEnabled(vals.contains("Programme End Date"));
        prog_strt.setEnabled(vals.contains("Programme Start Date"));
        prog_strt1.setEnabled(vals.contains("Programme Start Date"));

        prog_inst_list.setEnabled(vals.contains("Programme Instructor"));
        show_branch_client.setEnabled(vals.contains("Programme Branch"));
        no_of_parts.setEnabled(vals.contains("Number of Participants"));

        // TODO add your handling code here:

       
        vals.clear();
    }//GEN-LAST:event_filter_btnActionPerformed

    private void pid_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pid_boxActionPerformed
        // TODO add your handling code here:
//        if(cid_box.isSelected()){
//
//            TableColumn ID_col = new TableColumn();
//            ID_col.setIdentifier("ID");
//            ID_col.setHeaderValue("ID");
//            ID_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(ID_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("ID"));
//            client_table.validate();
//
//        }
//
    }//GEN-LAST:event_pid_boxActionPerformed

    private void pname_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pname_boxActionPerformed
//        if(cname_box.isSelected()){
//
//            TableColumn name_col = new TableColumn();
//            name_col.setIdentifier("ID");
//            name_col.setHeaderValue("ID");
//            name_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(name_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Name"));
//            client_table.validate();
//
//        }        // TODO add your handling code here:
    }//GEN-LAST:event_pname_boxActionPerformed

    private void pstart_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pstart_boxActionPerformed
        // TODO add your handling code here:
//        if(csex_box.isSelected()){
//
//            TableColumn sex_col = new TableColumn();
//            sex_col.setIdentifier("Sex");
//            sex_col.setHeaderValue("Sex");
//            sex_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(sex_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Sex"));
//            client_table.validate();
//
//        }
    }//GEN-LAST:event_pstart_boxActionPerformed

    private void pend_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pend_boxActionPerformed
        // TODO add your handling code here:''

//        if(cdob_box.isSelected()){
//
//            TableColumn dob_col = new TableColumn();
//            dob_col.setIdentifier("Date of Birth");
//            dob_col.setHeaderValue("Date of Birth");
//            dob_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(dob_col);
//
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Date of Birth"));
//            client_table.validate();
//
//        }
    }//GEN-LAST:event_pend_boxActionPerformed

    private void pinst_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinst_boxActionPerformed
        // TODO add your handling code here:

//        if(cjoin_box.isSelected()){
//
//            TableColumn join_col = new TableColumn();
//            join_col.setIdentifier("Membership Date");
//            join_col.setHeaderValue("Membership Date");
//            join_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(join_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Memebership Date"));
//            client_table.validate();
//
//        }

    }//GEN-LAST:event_pinst_boxActionPerformed

    private void pbranch_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbranch_boxActionPerformed
        // TODO add your handling code here:

//        if(ctier_box.isSelected()){
//
//            TableColumn TIER_col = new TableColumn();
//            TIER_col.setIdentifier("Membership Type");
//            TIER_col.setHeaderValue("Membership Type");
//            TIER_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(TIER_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Memebership Type"));
//            client_table.validate();
//
//        }

    }//GEN-LAST:event_pbranch_boxActionPerformed

    private void no_part_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_no_part_boxActionPerformed
        // TODO add your handling code here:
//        if(cphone_box.isSelected()){
//
//            TableColumn phone_col = new TableColumn();
//            phone_col.setIdentifier("Phone");
//            phone_col.setHeaderValue("Phone");
//            phone_col.setPreferredWidth(WIDTH);
//            client_table.addColumn(phone_col);
//            client_table.validate();
//
//        }
//        else
//        {client_table.removeColumn(client_table.getColumn("Phone"));
//            client_table.validate();

        //}

    }//GEN-LAST:event_no_part_boxActionPerformed

    private void toHome_show_client_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toHome_show_client_btnActionPerformed
        // TODO add your handling code here:
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Home wind = new Home();
                wind.setVisible(true);
            }
        });
        this.dispose();
        
    }//GEN-LAST:event_toHome_show_client_btnActionPerformed

    private void inst_name_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inst_name_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inst_name_boxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowProg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowProg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowProg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowProg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowProg dialog = new ShowProg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filter_btn;
    private javax.swing.JList<String> filter_prog;
    private javax.swing.JCheckBox inst_name_box;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner no_of_parts;
    private javax.swing.JCheckBox no_part_box;
    private javax.swing.JCheckBox pbranch_box;
    private javax.swing.JCheckBox pend_box;
    private javax.swing.JCheckBox pid_box;
    private javax.swing.JCheckBox pinst_box;
    private javax.swing.JCheckBox pname_box;
    private com.toedter.calendar.JDateChooser prog_end;
    private com.toedter.calendar.JDateChooser prog_end1;
    private javax.swing.JComboBox<String> prog_inst_list;
    private com.toedter.calendar.JDateChooser prog_strt;
    private com.toedter.calendar.JDateChooser prog_strt1;
    private javax.swing.JTable prog_table;
    private javax.swing.JCheckBox pstart_box;
    private javax.swing.JButton quit_show_client_btn;
    private javax.swing.JComboBox<String> show_branch_client;
    private javax.swing.JButton show_btn;
    private javax.swing.JTextField show_id_prg;
    private javax.swing.JTextField show_name_prg;
    private javax.swing.JButton toHome_show_client_btn;
    // End of variables declaration//GEN-END:variables
private DBConnection conn;
private String[] branches;
private String[] instructors;
private ArrayList<String> cols = new ArrayList<String>();
    
    
    private String[] getBranches() throws SQLException, ClassNotFoundException {
       ArrayList<String> branches = new ArrayList<String>();
       String entry = "";
        try{conn = new DBConnection();
        Connection db = conn.getDB();
        Statement fetch = db.createStatement();
        ResultSet rs = fetch.executeQuery("SELECT bid FROM branch;");
        while(rs.next()){
        entry = rs.getInt("bid") + "";
        branches.add(entry);
        }}
        catch (Exception e){System.out.println(e);}
        return (String[]) branches.toArray(new String[branches.size()]);
        
    }
    private String[] getInst() throws SQLException, ClassNotFoundException {
       ArrayList<String> progs = new ArrayList<String>();
       String entry = "";
        try{conn = new DBConnection();
        Connection db = conn.getDB();
        Statement fetch = db.createStatement();
        ResultSet rs = fetch.executeQuery("SELECT eid FROM employee WHERE edep = \"Instructors/Trainers\";");
        while(rs.next()){
        entry = rs.getInt("eid") + "";
       progs.add(entry);
        }}
        catch (Exception e){System.out.println(e);}
        return (String[]) progs.toArray(new String[progs.size()]);
        
    }
    

}
