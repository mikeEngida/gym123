/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gymgui;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Niro Computers
 */
public class ShowProp extends javax.swing.JDialog {

    /**
     * Creates new form ShowProp
     */
    public ShowProp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            branches = obj.getBranches();
            
            initComponents();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterProp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegisterProp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        filter_prop = new javax.swing.JList<>();
        prop_type = new javax.swing.JTextField();
        prop_model = new javax.swing.JTextField();
        prop_date = new com.toedter.calendar.JDateChooser();
        prop_branch = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        type_box = new javax.swing.JCheckBox();
        model_box = new javax.swing.JCheckBox();
        date_box = new javax.swing.JCheckBox();
        branch_box = new javax.swing.JCheckBox();
        pid_box = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        quit_show_dept_btn = new javax.swing.JButton();
        toHome_show_dept_btn = new javax.swing.JButton();
        id_box = new javax.swing.JCheckBox();
        number_box = new javax.swing.JCheckBox();
        prop_id = new javax.swing.JTextField();
        number = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Show a Property Record");

        filter_prop.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "ID", "Type", "Model", "Purchase Date", "Number", "Branch" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(filter_prop);

        prop_type.setText("Enter Type");
        prop_type.setEnabled(false);

        prop_model.setText("Enter Model Number");
        prop_model.setEnabled(false);

        prop_date.setToolTipText("Enter the purchase date here");
        prop_date.setEnabled(false);

        prop_branch.setModel(new DefaultComboBoxModel(this.branches));
        prop_branch.setEnabled(false);

        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter By:");

        jLabel3.setText("Show By");

        type_box.setSelected(true);
        type_box.setText("Type");
        type_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                type_boxActionPerformed(evt);
            }
        });

        model_box.setText("Model");
        model_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model_boxActionPerformed(evt);
            }
        });

        date_box.setText("Purchase Date");
        date_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_boxActionPerformed(evt);
            }
        });

        branch_box.setText("Branch");
        branch_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branch_boxActionPerformed(evt);
            }
        });

        pid_box.setText("Show");
        pid_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pid_boxActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Type"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        quit_show_dept_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        quit_show_dept_btn.setText("QUIT");
        quit_show_dept_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quit_show_dept_btnActionPerformed(evt);
            }
        });

        toHome_show_dept_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        toHome_show_dept_btn.setText("GO BACK");
        toHome_show_dept_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toHome_show_dept_btnActionPerformed(evt);
            }
        });

        id_box.setSelected(true);
        id_box.setText("ID");
        id_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_boxActionPerformed(evt);
            }
        });

        number_box.setText("Number");
        number_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_boxActionPerformed(evt);
            }
        });

        prop_id.setText("Enter ID");
        prop_id.setEnabled(false);
        prop_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prop_idActionPerformed(evt);
            }
        });

        number.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        number.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(id_box, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(78, 78, 78)
                                        .addComponent(model_box)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(number_box, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(branch_box, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(pid_box))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(prop_type, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(24, 24, 24)
                                                        .addComponent(prop_date, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(prop_model, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(prop_id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(24, 24, 24)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(prop_branch, 0, 145, Short.MAX_VALUE)
                                                            .addComponent(number)))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(type_box, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(78, 78, 78)
                                                .addComponent(date_box)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(toHome_show_dept_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(quit_show_dept_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prop_id, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prop_model, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prop_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(prop_type)
                            .addComponent(prop_date, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(model_box)
                    .addComponent(branch_box)
                    .addComponent(pid_box)
                    .addComponent(id_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(type_box)
                    .addComponent(date_box)
                    .addComponent(number_box))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toHome_show_dept_btn)
                    .addComponent(quit_show_dept_btn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void quit_show_dept_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quit_show_dept_btnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quit_show_dept_btnActionPerformed

    private void toHome_show_dept_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toHome_show_dept_btnActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Home wind = new Home();
                wind.setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_toHome_show_dept_btnActionPerformed

    private void type_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_type_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_type_boxActionPerformed

    private void model_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_model_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_model_boxActionPerformed

    private void date_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_date_boxActionPerformed

    private void branch_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branch_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_branch_boxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        List<String> vals = filter_prop.getSelectedValuesList();
        prop_id.setEnabled(vals.contains("ID"));
        number.setEnabled(vals.contains("Number"));
        prop_type.setEnabled(vals.contains("Type"));
        prop_model.setEnabled(vals.contains("Model"));
        prop_branch.setEnabled(vals.contains("Branch"));
        prop_date.setEnabled(vals.contains("Purchase Date"));
        
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pid_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pid_boxActionPerformed
        // TODO add your handling code here:
        List<String> vals = filter_prop.getSelectedValuesList();
        cols = new ArrayList<String>();
try{
if(vals.size()>0){
String whereClause = " WHERE " + createWhereClause(vals);
String select = "SELECT DISTINCT " + selectedBoxes() + " FROM property ";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select+whereClause);
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select + whereClause);

selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "prop_id");
map.put("Type", "prop_type");
map.put("Model", "prop_model");
map.put("Purchase Date", "prop_purchase_date");
map.put("Number", "number");
map.put("Branch", "prop_branch");
  
        
String[] dataArray = new String[cols.size()];
while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}

   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
jTable1.setModel(model);

cols.clear();
data.clear();



}
else{
String select = "SELECT DISTINCT " + selectedBoxes() + " FROM property;";
//whereClause = whereClause + restOfWhereClause(vals);
System.out.println(select);
conn = new DBConnection();
Connection db = conn.getDB();
Statement show = db.createStatement();
ResultSet rs = show.executeQuery(select);
selectedCols(cols);
ArrayList<String[]> data = new ArrayList<String[]>();
HashMap<String, String> map = new HashMap<String, String> ();
map.put("ID", "prop_id");
map.put("Type", "prop_type");
map.put("Model", "prop_model");
map.put("Purchase Date", "prop_purchase_date");
map.put("Number", "number");
map.put("Branch", "prop_branch");

  
        
String[] dataArray = new String[cols.size()];
    //System.out.println(rs.getMetaData().getColumnCount());

while(rs.next()){
    for (int i = 0; i < dataArray.length; i++) {
        dataArray[i] =  rs.getString(map.get(cols.get(i)));
        
    }
    String[] temp = dataArray.clone();
    data.add(temp);



}
   String[][] Data = new String[data.size()][cols.size()];
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < cols.size(); j++) {
            Data[i][j] = data.get(i)[j];
        }
    }
 
String[] title = (String[]) cols.toArray(new String[cols.size()]);
DefaultTableModel model = new DefaultTableModel(Data, title);//DefaultTableModel(data.toArray(Data, title)
jTable1.setModel(model);

cols.clear();
data.clear();

}






}
catch(Exception ex){
    javax.swing.JOptionPane.showMessageDialog(rootPane, "Oops! Unknown Error occured with the database.");
    ex.printStackTrace();

}
    }//GEN-LAST:event_pid_boxActionPerformed
private void selectedCols(ArrayList<String> cols){
    if(id_box.isSelected()) cols.add("ID");
    else cols.remove("ID");
    if(type_box.isSelected()) {cols.add("Type");}
    else {cols.remove("Type");}
    if(model_box.isSelected()) cols.add("Model");
    else cols.remove("Model");
    if(date_box.isSelected()) cols.add("Purchase Date");
    else cols.remove("Purchase Date");
    if(number_box.isSelected()) cols.add("Number");
    else cols.remove("Number");
    if(branch_box.isSelected()) cols.add("Branch");
    else cols.remove("Branch");
    
    
    
    
    }

    
    
    
    
    private String selectedBoxes(){
    ArrayList<String> fields = new ArrayList<String>();
    if(id_box.isSelected()) fields.add("property.prop_id");
    if(type_box.isSelected()) fields.add("property.prop_type");
    if(model_box.isSelected()) fields.add("property.prop_model");
    if(number_box.isSelected()) fields.add("property.number");
    if(date_box.isSelected()) fields.add("property.prop_purchase_date");
    if(branch_box.isSelected()) fields.add("property.prop_branch");
 
    
    return (" " + String.join(", ", (String[])fields.toArray(new String[fields.size()])));
    


    
    
    }
    
    
    private String createWhereClause(List<String> vals){
        String param[] =  new String[vals.size()];
        //System.out.println(new SimpleDateFormat("yyyy/MM/dd").format(show_client_dob2.getDate()));
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        //System.out.println(vals.contains("Client Membership Date"));
        String count;
//        if(vals.contains("Number of Programmes") && Integer.parseInt(no_of_progs.getValue().toString()) > 0)
//               count = " AND NOT ISNULL(pid) GROUP BY client.cid HAVING count(*) = " + no_of_progs.getValue().toString()+ ";";
//        else if (vals.contains("Number of Programmes") && Integer.parseInt(no_of_progs.getValue().toString()) == 0 )
//               count = " AND ISNULL(pid) GROUP BY client.cid;";
//        else
//             count = "GROUP BY client.cid;";
        if(vals.contains("ID")){
        param[vals.indexOf("ID") ] = " property.prop_id = " + prop_id.getText();}
        
        if(vals.contains("Type")){
        param[vals.indexOf("Type") ] = " property.prop_type = \"" + prop_type.getText() + "\"" ;
        }
        if(vals.contains("Model")){
        param[vals.indexOf("Model")] = " property.prop_model = \"" + prop_model.getText() + "\"";}
//        if(vals.contains("Client Membership Date")){
//        param[vals.indexOf("Client Membership Date") ] = " client.cstart_date >= \"" + dateFormat.format(date_f.getDate()) + "\"  AND client.cstart_date < \"" + dateFormat.format(date_f2.getDate())+ "\"" ;}
        if(vals.contains("Purchase Date")){
        param[vals.indexOf("Purchase Date") ] = " property.prop_purchase_date >= \"" + dateFormat.format(prop_date.getDate()) + "\" " ;}
        if(vals.contains("Branch")){
        param[vals.indexOf("Branch") ] = " property.prop_branch = " + prop_branch.getSelectedItem().toString();}

        if(vals.contains("Number")){
        param[vals.indexOf("Number") ] = " property.number = " + number.getValue().toString();}
        
        return String.join(" AND ", param).replace("null", "TRUE");
        
        
       
        
    
    
    
    }
    private void id_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_boxActionPerformed

    private void number_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_number_boxActionPerformed

    private void prop_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prop_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prop_idActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowProp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowProp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowProp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowProp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowProp dialog = new ShowProp(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox branch_box;
    private javax.swing.JCheckBox date_box;
    private javax.swing.JList<String> filter_prop;
    private javax.swing.JCheckBox id_box;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JCheckBox model_box;
    private javax.swing.JSpinner number;
    private javax.swing.JCheckBox number_box;
    private javax.swing.JButton pid_box;
    private javax.swing.JComboBox<String> prop_branch;
    private com.toedter.calendar.JDateChooser prop_date;
    private javax.swing.JTextField prop_id;
    private javax.swing.JTextField prop_model;
    private javax.swing.JTextField prop_type;
    private javax.swing.JButton quit_show_dept_btn;
    private javax.swing.JButton toHome_show_dept_btn;
    private javax.swing.JCheckBox type_box;
    // End of variables declaration//GEN-END:variables
    private DBConnection conn;
    private ShowClient obj = new ShowClient();
    private String[] branches;
    private ArrayList<String> cols;
}
